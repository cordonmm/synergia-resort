<?phpclass Reserva extends Eloquent {    protected $table = 'reservas';	public function fecha_ini(){        return $this->fecha_ini;    }    public function fecha_fin(){        return $this->fecha_fin;    }    public function nombre(){        return $this->nombre;    }    public function email(){        return $this->email;    }    public function telefono(){        return $this->telefono;    }    public function dni(){        return $this->dni;    }    public function adultos(){        return $this->adultos;    }    public function ninos(){        return $this->ninos;    }    public function precio(){        return $this->precio;    }    public function observaciones(){        return $this->observaciones;    }    public function created_at(){        return $this->created_at;    }    public function updated_at(){        return $this->updated_at;    }    public static function validate($input){        $rule_date =    'required|date|before:fecha_fin';        if($input['fecha_ini'] == $input['fecha_fin'])            $rule_date = 'required|date';        $rules = array(            'fecha_fin'         =>  array('required', 'date'),            'fecha_ini'         =>  $rule_date,            'nombre'            =>  array('required', 'max:255'),            'email'             =>  array('required', 'email', 'max:255'),            'telefono'          =>  array('required', 'regex:/^\d{9}$/'),            'dni'               =>  array('required'),            'adultos'           =>  array('required', 'integer', 'min:1', 'max:8'),            'ninos'             =>  array('required', 'integer', 'min:0', 'max:4'),            'precio'            =>  array('required', 'numeric', 'min:0')        );        $messages = array(            'required'  =>      'Este campo debe ser rellenado.',            'email'     =>      'Este campo debe tener el formato de un email.',            'integer'   =>      'Este campo debe ser solamente numérico.',            'min'       =>      'Este campo debe tener al menos :min carácteres.',            'max'       =>      'Este campo debe tener como máximo :max carácteres.',            'regex'     =>      'Este campo no tiene un formato válido.',            'adultos.min'   =>  'El número de adultos no puede ser menor a :min.',            'adultos.max'   =>  'El número de adultos no puede ser superior a :max.',            'ninos.min'     =>  'El número de niños no puede ser menor a :min.',            'ninos.max'     =>  'El número de niños no puede ser superior a :max.',            'precio.min'    =>  'El precio no puede ser menor a : min.',            'date'          =>  'El formato de fecha no es válido.',            'fecha_ini.before'   =>  'La fecha de inicio no puede ser superior a la final.'        );        $validator = Validator::make(            $input,            $rules,            $messages        );        return $validator;    }    public static function validate_dates_reserva($fecha_ini, $fecha_fin, $fechas_no_disponibles){        $data = array(          'fecha_ini'   => $fecha_ini,          'fecha_fin'   => $fecha_fin,          'success'     => 1        );        $fecha_ini  =   new DateTime($fecha_ini);        $fecha_fin  =   new DateTime($fecha_fin);        foreach($fechas_no_disponibles as $fecha_no_disponible){            $fecha_no_disponible = new DateTime($fecha_no_disponible);            if($fecha_no_disponible >= $fecha_ini && $fecha_no_disponible <= $fecha_fin){                $data['success'] = 0;                break;            }        }        return $data;    }}